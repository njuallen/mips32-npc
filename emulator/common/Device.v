// Generated by AXI4Mem.py
import "DPI-C" function void device_tick
(
  input  bit  in_req_valid,
  input  int  in_req_bits_addr,
  input  int  in_req_bits_data,
  input  bit  in_req_bits_op,
  input  byte in_req_bits_wstrb,
);

module Device(
  input         clk,
  input         reset,
  output        in_req_ready,
  input         in_req_valid,
  input  [31:0] in_req_bits_addr,
  input  [31:0] in_req_bits_data,
  input         in_req_bits_op,
  input  [1:0]  in_req_bits_wstrb,
  output        in_resp_valid,
  output [31:0] in_resp_bits_data
);

// delayed inputs
wire #0.1 __in_req_valid = in_req_valid;
wire [31:0] #0.1 __in_req_bits_addr = in_req_bits_addr;
wire [31:0] #0.1 __in_req_bits_data = in_req_bits_data;
wire #0.1 __in_req_bits_op = in_req_bits_op;
wire [7:0] #0.1 __in_req_bits_wstrb = {6'b0, in_req_bits_wstrb};

// we are always ready
assign in_req_ready = 1'b1;
// we are effectively making device write single cycle
assign in_resp_valid = in_req_valid;
assign in_resp_bits_data = 32'h0;

always @(posedge clk)
begin
  if (!reset) begin
    // only support write, no read
    device_tick(
      __in_req_valid,
      __in_req_bits_addr,
      __in_req_bits_data,
      __in_req_bits_op,
      __in_req_bits_wstrb
    );
  end
end
endmodule
