all: emulator

common := $(srcDir)/emulator/common

MK_TARGET_PROC ?= rv32_1stage

MK_TARGET_ARCH ?= riscv

# the architecture used to make tests from AM
AM_ARCH ?= riscv32-emu

CXXFLAGS := $(CXXFLAGS) -O1 -std=c++11  -g -Wall -Werror

CXXFLAGS := $(CXXFLAGS) -I$(common)

# what does -Wl, -rpath -L. mean?
LDFLAGS := $(LDFLAGS) -Wl,-rpath -L. -lpthread -lreadline

CHISEL_ARGS := -td emulator/${MK_TARGET_PROC}/generated-src

generated-src/Top.v: $(srcDir)/src/${MK_TARGET_PROC}/*.scala $(srcDir)/src/common/*.scala
	cd $(buildDir) && $(SBT) "project ${MK_TARGET_PROC}" "run $(CHISEL_ARGS)"

generated_dir = $(srcDir)/emulator/${MK_TARGET_PROC}

# Run Verilator to produce a fast binary to emulate this circuit.
VERILATOR := verilator --cc --exe 
VERILATOR_FLAGS := --top-module Top \
  +define+PRINTF_COND=1 \
  --assert \
  --output-split 20000 \
	--x-assign unique \
  -O3 -CFLAGS "$(CXXFLAGS) -DVERILATOR"

common_src := $(wildcard $(common)/*.cpp)
common_h := $(wildcard $(common)/*.h)

emulator: generated-src/Top.v $(common)/AsyncReadMem.sv $(common_src) $(common_h)
	$(VERILATOR) $(VERILATOR_FLAGS) \
	-o $(generated_dir)/$@ $< $(common)/AsyncReadMem.sv $(common)/Device.v \
	-LDFLAGS "$(LDFLAGS)" $(common_src)
	$(MAKE) -C $(generated_dir)/obj_dir -f VTop.mk
 
clean:
	rm -rf *.o *.a emulator obj_dir emulator-debug generated-src generated-src-debug DVEfiles output

clean-tests:
	rm -rf output/*.out

#--------------------------------------------------------------------
# AM cputest
#--------------------------------------------------------------------

cputest_dir = $(AM_HOME)/tests/cputest
cputest_src_dir = $(AM_HOME)/tests/cputest/tests
cputest_build_dir = $(AM_HOME)/tests/cputest/build
cputest = $(basename $(notdir $(wildcard $(cputest_src_dir)/*.c)))

#--------------------------------------------------------------------
# Run cputest
#--------------------------------------------------------------------
    
cputest_out = $(addsuffix .out, $(cputest))
cputest_vcd = $(addsuffix .vcd, $(cputest))
cputest_crosscheck = $(addsuffix .crosscheck, $(cputest))

cputest_timeout ?=300000
                           
output/%.out: $(cputest_src_dir)/%.c emulator
	@mkdir -p output
	@# remove the directory part and suffix part of the file, we get the test's name
	@make -s -C $(cputest_dir) ARCH=$(AM_ARCH) ALL=$(basename $(notdir $<))
	@cp $(cputest_build_dir)/$(basename $(notdir $<))-$(AM_ARCH).bin.txt bin.txt
	./emulator +max-cycles=$(cputest_timeout) >$@ 2>&1
	@rm bin.txt

# crosscheck for asm-tests
output/%.crosscheck: $(cputest_src_dir)/%.c emulator
	@mkdir -p output
	@# remove the directory part and suffix part of the file, we get the test's name
	@make -s -C $(cputest_dir) ARCH=$(AM_ARCH) ALL=$(basename $(notdir $<))
	@cp $(cputest_build_dir)/$(basename $(notdir $<))-$(AM_ARCH).bin.txt $(srcDir)/emulator/rv32_1stage/bin.txt
	@cp $(cputest_build_dir)/$(basename $(notdir $<))-$(AM_ARCH).bin.txt bin.txt
	@python $(srcDir)/emulator/common/crosscheck.py $(srcDir)/emulator/rv32_1stage/emulator emulator $(basename $(notdir $<)) $@ $(cputest_timeout)
	@rm $(srcDir)/emulator/rv32_1stage/bin.txt
	@rm bin.txt

run-cputest: $(addprefix output/, $(addsuffix .out, $(cputest)))

run-crosscheck-cputest: $(addprefix output/, $(addsuffix .crosscheck, $(cputest)))

run: run-cputest 
run-crosscheck: run-crosscheck-cputest
